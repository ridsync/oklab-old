<!DOCTYPE html>
<% include partials/head %>

<body>
  <header>
    <% include partials/header %>
  </header>

<div id="container">
    <style scoped>
        @media only screen and (max-width: 640px) {
            #container { padding: 0 0 !important; }
        }
    </style>
<style scoped>
    @media only screen and (max-width: 640px) {
        #features { padding: 10px 15px !important;  }
    }
</style>

<div id="promo">
    <p class="heading">OK MEAN Stack Project</p>
    <p class="subheading">Fast, Easily Managed, Intuitive <mark>Content Management System</mark> based on Node.js</p>

    <a href="/about" class="pure-button pure-button-primary" style="font-size:120%; margin-top:100px; padding: 10px 20px !important;">Overview</a>
</div>

<div id="features">
    <div class="row">
        <div class="col-md-3">
            <h4>Fullstack JavaScript</h4>
            <em>Tinypress built with Node.js, MongoDB, and Express.js. You can easily customize, grasp codes with just one language. </em>
        </div>
        <div class="col-md-3">
            <h4>Modular Structure</h4>
            <em>Inspired with <a href="https://vimeo.com/56166857">TJ's idea</a>, Tinypress has MVC pattern and its modular structure enables you to easily manage data model, client view, and internal controller.</em>
        </div>
        <div class="col-md-3">
            <h4>Ready for Publish</h4>
            <em>Tinpyress has essential modules to publish website such as joining, finding a password, editing profile, writing article, and admin handling.
            click <a href="/all">here</a> for more information.</em>
        </div>
        <div class="col-md-3">
            <h4>REST API</h4>
            <em>Bindng CRUD to HTTP verbs Intuitively, Tinypress has REST api that relies upon the HTTP standard.</em>
        </div>
    </div>
</div>

    </div>

    <!-- end of set layout style-->
  <footer>
    <% include partials/footer %>
  </footer>
</body>

<script src="/javascripts/responsive-menu.js"></script>
